// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: org.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createOrg = `-- name: CreateOrg :one
INSERT INTO org (
  id,
  name,
  userid,
  accountid
) VALUES (
    $1, $2, $3, $4
) RETURNING id, name, userid, accountid
`

type CreateOrgParams struct {
	ID        uuid.UUID     `json:"id"`
	Name      string        `json:"name"`
	Userid    uuid.UUID     `json:"userid"`
	Accountid uuid.NullUUID `json:"accountid"`
}

func (q *Queries) CreateOrg(ctx context.Context, arg CreateOrgParams) (Org, error) {
	row := q.db.QueryRowContext(ctx, createOrg,
		arg.ID,
		arg.Name,
		arg.Userid,
		arg.Accountid,
	)
	var i Org
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Userid,
		&i.Accountid,
	)
	return i, err
}

const getOrgFromUser = `-- name: GetOrgFromUser :one
SELECT id, name, userid, accountid FROM org
WHERE userid = $1 LIMIT 1
`

func (q *Queries) GetOrgFromUser(ctx context.Context, userid uuid.UUID) (Org, error) {
	row := q.db.QueryRowContext(ctx, getOrgFromUser, userid)
	var i Org
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Userid,
		&i.Accountid,
	)
	return i, err
}
