// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: examround.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createExamRound = `-- name: CreateExamRound :one
INSERT INTO examround (
  id,
  type,
  level,
  time,
  userid,
  orgid
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, type, level, time, userid, orgid, created_at, last_modified
`

type CreateExamRoundParams struct {
	ID     uuid.UUID `json:"id"`
	Type   int32     `json:"type"`
	Level  int32     `json:"level"`
	Time   int32     `json:"time"`
	Userid uuid.UUID `json:"userid"`
	Orgid  uuid.UUID `json:"orgid"`
}

func (q *Queries) CreateExamRound(ctx context.Context, arg CreateExamRoundParams) (Examround, error) {
	row := q.db.QueryRowContext(ctx, createExamRound,
		arg.ID,
		arg.Type,
		arg.Level,
		arg.Time,
		arg.Userid,
		arg.Orgid,
	)
	var i Examround
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Level,
		&i.Time,
		&i.Userid,
		&i.Orgid,
		&i.CreatedAt,
		&i.LastModified,
	)
	return i, err
}

const getExamRound = `-- name: GetExamRound :one
SELECT id, type, level, time, userid, orgid, created_at, last_modified FROM examround
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetExamRound(ctx context.Context, id uuid.UUID) (Examround, error) {
	row := q.db.QueryRowContext(ctx, getExamRound, id)
	var i Examround
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Level,
		&i.Time,
		&i.Userid,
		&i.Orgid,
		&i.CreatedAt,
		&i.LastModified,
	)
	return i, err
}
