// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: accounts.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  id,
  name,
  status,
  type,
  userid,
  orgid
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, name, status, type, userid, orgid, city, created_at, last_modified
`

type CreateAccountParams struct {
	ID     uuid.UUID `json:"id"`
	Name   string    `json:"name"`
	Status string    `json:"status"`
	Type   int32     `json:"type"`
	Userid uuid.UUID `json:"userid"`
	Orgid  uuid.UUID `json:"orgid"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.ID,
		arg.Name,
		arg.Status,
		arg.Type,
		arg.Userid,
		arg.Orgid,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.Type,
		&i.Userid,
		&i.Orgid,
		&i.City,
		&i.CreatedAt,
		&i.LastModified,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, name, status, type, userid, orgid, city, created_at, last_modified FROM accounts
WHERE userid = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, userid uuid.UUID) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, userid)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.Type,
		&i.Userid,
		&i.Orgid,
		&i.City,
		&i.CreatedAt,
		&i.LastModified,
	)
	return i, err
}
