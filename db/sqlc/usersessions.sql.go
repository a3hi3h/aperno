// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: usersessions.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUserSession = `-- name: CreateUserSession :one
INSERT INTO usersessions (
  id,
  userid,
  refresh_token,
  user_agent,
  client_ip,
  expires_at,
  is_blocked
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, userid, refresh_token, user_agent, client_ip, expires_at, is_blocked, created_at
`

type CreateUserSessionParams struct {
	ID           uuid.UUID `json:"id"`
	Userid       uuid.UUID `json:"userid"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	ExpiresAt    time.Time `json:"expires_at"`
	IsBlocked    bool      `json:"is_blocked"`
}

func (q *Queries) CreateUserSession(ctx context.Context, arg CreateUserSessionParams) (Usersession, error) {
	row := q.db.QueryRowContext(ctx, createUserSession,
		arg.ID,
		arg.Userid,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.ExpiresAt,
		arg.IsBlocked,
	)
	var i Usersession
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.ExpiresAt,
		&i.IsBlocked,
		&i.CreatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, userid, refresh_token, user_agent, client_ip, expires_at, is_blocked, created_at FROM usersessions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Usersession, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Usersession
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.ExpiresAt,
		&i.IsBlocked,
		&i.CreatedAt,
	)
	return i, err
}

const getUserIdForSession = `-- name: GetUserIdForSession :one
SELECT userid FROM usersessions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserIdForSession(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserIdForSession, id)
	var userid uuid.UUID
	err := row.Scan(&userid)
	return userid, err
}
